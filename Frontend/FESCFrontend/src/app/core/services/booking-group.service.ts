import { Injectable } from '@angular/core';
import { HttpBookingGroupsService } from './http/http-booking-groups.service';
import { Response } from '../../models/api/response';
import { Observable, lastValueFrom } from 'rxjs';
import { BookingGroup } from '../../models/entities/bookings/bookinggroup';
import { Select } from '../../models/forms/select';

@Injectable({
  providedIn: 'root',
})
export class BookingGroupService {
  constructor(private httpBookingGroupsService: HttpBookingGroupsService) {}

  add(
    hotelPlanId: number,
    hotelPlanName: string,
    companyId: number,
    companyName: string,
    companyAddress: string,
    companyPhone: string,
    companyEmail: string,
    contactName: string,
    contactWorkPosition: string,
    contactMethodId: number,
    contactMethodName: string,
    segment01: string,
    segment02: string,
    segment03: string,
    transport: string,
    airlineId: number,
    airlineName: string,
    countryId: number,
    countryName: string,
    stateId: number,
    stateName: string,
    cityId: number,
    cityName: string,
    allot: boolean,
    grp: boolean,
    quotationDate: Date,
    arrivalDate: Date,
    departureDate: Date,
    numberOfNights: number,
    guaranteeDate: Date,
    guaranteeId: number,
    guaranteeName: string,
    depositId: number,
    depositName: string,
    travelPurposeId: number,
    travelPurposeName: string,
    agencyId: number,
    agencyName: string,
    commissionable: boolean,
    rateId: number,
    rateName: string,
    currencyId: number,
    currencyName: string,
    reservationStatusId: number,
    reservationStatusName: string,
    reservationId: number,
    masterFolio: number,
    hideRate: boolean,
    discount: boolean,
    rateToCharge: number,
    packageDiscount: number,
    accountingAccountId: number,
    accountingAccountName: string,
    complex: string,
    hotelId: number
  ): Observable<Response<boolean>> {
    const info: BookingGroup = {
      bookingId: 0,
      hotelPlanId: hotelPlanId,
      hotelPlanName: hotelPlanName,
      companyId: companyId,
      companyName: companyName,
      companyAddress: companyAddress,
      companyPhone: companyPhone,
      companyEmail: companyEmail,
      contactName: contactName,
      contactWorkPosition: contactWorkPosition,
      contactMethodId: contactMethodId,
      contactMethodName: contactMethodName,
      segment01: segment01,
      segment02: segment02,
      segment03: segment03,
      transport: transport,
      airlineId: airlineId,
      airlineName: airlineName,
      countryId: countryId,
      countryName: countryName,
      stateId: stateId,
      stateName: stateName,
      cityId: cityId,
      cityName: cityName,
      allot: allot,
      grp: grp,
      quotationDate: quotationDate,
      arrivalDate: arrivalDate,
      departureDate: departureDate,
      numberOfNights: numberOfNights,
      guaranteeDate: guaranteeDate,
      guaranteeId: guaranteeId,
      guaranteeName: guaranteeName,
      depositId: depositId,
      depositName: depositName,
      travelPurposeId: travelPurposeId,
      travelPurposeName: travelPurposeName,
      agencyId: agencyId,
      agencyName: agencyName,
      commissionable: commissionable,
      rateId: rateId,
      rateName: rateName,
      currencyId: currencyId,
      currencyName: currencyName,
      reservationStatusId: reservationStatusId,
      reservationStatusName: reservationStatusName,
      reservationId: reservationId,
      masterFolio: masterFolio,
      hideRate: hideRate,
      discount: discount,
      rateToCharge: rateToCharge,
      packageDiscount: packageDiscount,
      accountingAccountId: accountingAccountId,
      accountingAccountName: accountingAccountName,
      complex: complex,
      createdAt: new Date(),
      updatedAt: new Date(),
      createdByUserId: 0,
      updatedByUserId: 0,
      statusId: 1,
      hotelId: hotelId,
    };

    return this.httpBookingGroupsService.post(info);
  }

  update(
    bookingId: number,
    hotelPlanId: number,
    hotelPlanName: string,
    companyId: number,
    companyName: string,
    companyAddress: string,
    companyPhone: string,
    companyEmail: string,
    contactName: string,
    contactWorkPosition: string,
    contactMethodId: number,
    contactMethodName: string,
    segment01: string,
    segment02: string,
    segment03: string,
    transport: string,
    airlineId: number,
    airlineName: string,
    countryId: number,
    countryName: string,
    stateId: number,
    stateName: string,
    cityId: number,
    cityName: string,
    allot: boolean,
    grp: boolean,
    quotationDate: Date,
    arrivalDate: Date,
    departureDate: Date,
    numberOfNights: number,
    guaranteeDate: Date,
    guaranteeId: number,
    guaranteeName: string,
    depositId: number,
    depositName: string,
    travelPurposeId: number,
    travelPurposeName: string,
    agencyId: number,
    agencyName: string,
    commissionable: boolean,
    rateId: number,
    rateName: string,
    currencyId: number,
    currencyName: string,
    reservationStatusId: number,
    reservationStatusName: string,
    reservationId: number,
    masterFolio: number,
    hideRate: boolean,
    discount: boolean,
    rateToCharge: number,
    packageDiscount: number,
    accountingAccountId: number,
    accountingAccountName: string,
    complex: string,
    hotelId: number
  ): Observable<Response<boolean>> {
    const info: BookingGroup = {
      bookingId: bookingId,
      hotelPlanId: hotelPlanId,
      hotelPlanName: hotelPlanName,
      companyId: companyId,
      companyName: companyName,
      companyAddress: companyAddress,
      companyPhone: companyPhone,
      companyEmail: companyEmail,
      contactName: contactName,
      contactWorkPosition: contactWorkPosition,
      contactMethodId: contactMethodId,
      contactMethodName: contactMethodName,
      segment01: segment01,
      segment02: segment02,
      segment03: segment03,
      transport: transport,
      airlineId: airlineId,
      airlineName: airlineName,
      countryId: countryId,
      countryName: countryName,
      stateId: stateId,
      stateName: stateName,
      cityId: cityId,
      cityName: cityName,
      allot: allot,
      grp: grp,
      quotationDate: quotationDate,
      arrivalDate: arrivalDate,
      departureDate: departureDate,
      numberOfNights: numberOfNights,
      guaranteeDate: guaranteeDate,
      guaranteeId: guaranteeId,
      guaranteeName: guaranteeName,
      depositId: depositId,
      depositName: depositName,
      travelPurposeId: travelPurposeId,
      travelPurposeName: travelPurposeName,
      agencyId: agencyId,
      agencyName: agencyName,
      commissionable: commissionable,
      rateId: rateId,
      rateName: rateName,
      currencyId: currencyId,
      currencyName: currencyName,
      reservationStatusId: reservationStatusId,
      reservationStatusName: reservationStatusName,
      reservationId: reservationId,
      masterFolio: masterFolio,
      hideRate: hideRate,
      discount: discount,
      rateToCharge: rateToCharge,
      packageDiscount: packageDiscount,
      accountingAccountId: accountingAccountId,
      accountingAccountName: accountingAccountName,
      complex: complex,
      createdAt: new Date(),
      updatedAt: new Date(),
      createdByUserId: 0,
      updatedByUserId: 0,
      statusId: 1,
      hotelId: hotelId,
    };
    return this.httpBookingGroupsService.put(bookingId, info);
  }

  delete(bookingId: number): Observable<Response<boolean>> {
    return this.httpBookingGroupsService.delete(bookingId);
  }

  async get(bookingId: number): Promise<Response<BookingGroup>> {
    const response = await lastValueFrom(
      this.httpBookingGroupsService.get(bookingId)
    );
    return response;
  }

  async getAll(): Promise<Response<BookingGroup[]>> {
    const response = await lastValueFrom(this.httpBookingGroupsService.getAll());
    return response;
  }
  /*
  async getDataForSelect(): Promise<Select[]> {
    const response = await lastValueFrom(this.httpBookingGroupsService.getAll());
    return response.data.map((item) => ({
      value: item.bookingId,
      text: item.name,
    }));
  }
    */
}
